DEFINE_TOKEN(
	DECLARE_MATH_TOKEN(LXR_SUM_SYMB, LXR_SUB_SYMB, LXR_MLT_SYMB, LXR_DIV_SYMB, LXR_GRT_SYBM, LXR_LST_SYBM),
	DECLARE_COMMENT_TOKEN(LXR_LINE_COMMENT, LXR_OPEN_COMMENT, LXR_CLOSE_COMMENT),
	DECLARE_TYPE(LXR_STRING_TYPE, LXR_INT_TYPE, LXR_DOUBLE_TYPE, LXR_FLOAT_TYPE, LXR_CHAR_TYPE, LXR_VOID_TYPE),
	DECLARE_SEP(LXR_COMMA, LXR_SEMICOLON, LXR_DOUBLE_DOTS, LXR_DOT, LXR_QUOTE, LXR_DOUBLE_QUOTE),
	DECLARE_BRK(LXR_OPEN_BRK, LXR_CLOSE_BRK, LXR_OPEN_CRL_BRK, LXR_CLOSE_CRL_BRK, LXR_OPEN_SQR_BRK, LXR_CLOSE_SQR_BRK),
	DECLARE_STATEMENT(LXR_IF_STATEMENT, LXR_WHILE_STATEMENT, LXR_SWITCH_STATEMENT, LXR_DO_STATEMENT, LXR_FOR_STATEMENT, LXR_RET_STATEMENT,LXR_ASSIGNMENT),
	DECLARE_MISC(LXR_CONST_DECLARATION,LXR_VAR_DECLARATION,LXR_ENUM_DECLARATION,LXR_STRUCT_DECLARATION,INVALID_POINTER),
	DECLARE_PP(LXR_DEFINE,LXR_UNDEF,LXR_MACRO_OPEN,LXR_MACRO_CLOSE)
)


DECLARE_TOKEN_TABLE_LH(
	// logic 
	DECLARE_TOKEN_STRING(LXR_SUM_SYMB,"+"),
	DECLARE_TOKEN_STRING(LXR_SUB_SYMB,"-"),
	DECLARE_TOKEN_STRING(LXR_MLT_SYMB,"*"),
	DECLARE_TOKEN_STRING(LXR_DIV_SYMB,"/"),
	DECLARE_TOKEN_STRING(LXR_GRT_SYBM,">"),
	DECLARE_TOKEN_STRING(LXR_LST_SYBM,"<"),

	// comment 
	DECLARE_TOKEN_STRING(LXR_LINE_COMMENT,""),
	DECLARE_TOKEN_STRING(LXR_OPEN_COMMENT,""),
	DECLARE_TOKEN_STRING(LXR_CLOSE_COMMENT,""),

	// type 
	DECLARE_TOKEN_STRING(LXR_STRING_TYPE,"str"),
	DECLARE_TOKEN_STRING(LXR_INT_TYPE,"int"),
	DECLARE_TOKEN_STRING(LXR_DOUBLE_TYPE,"double"),
	DECLARE_TOKEN_STRING(LXR_FLOAT_TYPE,"float"),
	DECLARE_TOKEN_STRING(LXR_CHAR_TYPE,"char"),
	DECLARE_TOKEN_STRING(LXR_VOID_TYPE,"void"),


	// sep 
	DECLARE_TOKEN_STRING(LXR_COMMA,","),
	DECLARE_TOKEN_STRING(LXR_SEMICOLON,";"),
	DECLARE_TOKEN_STRING(LXR_DOUBLE_DOTS,":"),
	DECLARE_TOKEN_STRING(LXR_DOT,"."),
	DECLARE_TOKEN_STRING(LXR_QUOTE,"'"),
	DECLARE_TOKEN_STRING(LXR_DOUBLE_QUOTE,"\""),


	// brackets
	DECLARE_TOKEN_STRING(LXR_OPEN_BRK,"("),
	DECLARE_TOKEN_STRING(LXR_CLOSE_BRK,")"),
	DECLARE_TOKEN_STRING(LXR_OPEN_CRL_BRK,"{"),
	DECLARE_TOKEN_STRING(LXR_CLOSE_CRL_BRK,"}"),
	DECLARE_TOKEN_STRING(LXR_OPEN_SQR_BRK,"["),
	DECLARE_TOKEN_STRING(LXR_CLOSE_SQR_BRK,"]"),


	// statement 
	DECLARE_TOKEN_STRING(LXR_IF_STATEMENT,"if"),
	DECLARE_TOKEN_STRING(LXR_WHILE_STATEMENT,"while"),
	DECLARE_TOKEN_STRING(LXR_SWITCH_STATEMENT,"switch"),
	DECLARE_TOKEN_STRING(LXR_DO_STATEMENT,"do"),
	DECLARE_TOKEN_STRING(LXR_FOR_STATEMENT,"for"),
	DECLARE_TOKEN_STRING(LXR_RET_STATEMENT,"return"),
	DECLARE_TOKEN_STRING(LXR_ASSIGNMENT,"="),

	// misc
	DECLARE_TOKEN_STRING(LXR_CONST_DECLARATION,"const"),
	DECLARE_TOKEN_STRING(LXR_VAR_DECLARATION,"var"),
	DECLARE_TOKEN_STRING(LXR_ENUM_DECLARATION,"enum"),
	DECLARE_TOKEN_STRING(LXR_STRUCT_DECLARATION,"enum"),
	DECLARE_TOKEN_STRING(INVALID_POINTER,"NULL"),

	// pre processor
	DECLARE_TOKEN_STRING(LXR_DEFINE,"#define"),
	DECLARE_TOKEN_STRING(LXR_UNDEF,"#undef"),
	DECLARE_TOKEN_STRING(LXR_MACRO_OPEN,"#macro"),
	DECLARE_TOKEN_STRING(LXR_MACRO_CLOSE,"#endmacro")
)


DECLARE_COMPOUND_TOKEN(
	CINDEX_DOUBLE_EQ,
	CINDEX_TRIPLE_EQ,
	CINDEX_TRIPLE_DOT,
	CINDEX_DOUBLE_SLASH,
	CINDEX_MULTY_LINE_COMMENT
)

DECLARE_COMPOUND_TABLE(
	DECLARE_COMPOUND(CINDEX_DOUBLE_EQ, 2, LXR_ASSIGNMENT, LXR_ASSIGNMENT),					// '==' symbols
	DECLARE_COMPOUND(CINDEX_TRIPLE_EQ, 3, LXR_ASSIGNMENT, LXR_ASSIGNMENT, LXR_ASSIGNMENT),	// '===' symbols
	DECLARE_COMPOUND(CINDEX_TRIPLE_DOT, 3, LXR_DOT, LXR_DOT, LXR_DOT),						// '...' symbols
	DECLARE_COMPOUND(CINDEX_DOUBLE_SLASH, 2, LXR_DIV_SYMB, LXR_DIV_SYMB),					// '//' symbols
	DECLARE_COMPOUND(CINDEX_MULTY_LINE_COMMENT, 2, LXR_DIV_SYMB, LXR_MLT_SYMB)				// '/*' symbols
)
